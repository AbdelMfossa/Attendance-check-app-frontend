{"ast":null,"code":"import Router from \"next/router\";\nimport axios from \"axios\";\nexport const authInitialProps = isProtectedRoute => ({\n  req,\n  res\n}) => {\n  const auth = getSessionFromServer();\n\n  if (isProtectedRoute && isAnonymous && currentPath !== \"/signin\") {\n    return redirectUser(res, \"/signin\");\n  }\n\n  return {\n    auth\n  };\n};\nexport const getSessionFromServer = async () => {\n  const {\n    user\n  } = await axios.get(\"users/currentuser\");\n  return {\n    user\n  };\n};\n\nconst redirectUser = (res, path) => {\n  if (res) {\n    res.redirect(302, path);\n    res.finished = true;\n    return {};\n  }\n\n  Router.replace(path);\n  return {};\n};","map":{"version":3,"sources":["/home/roosvelt/Livrable front-end/Attendance-check-app-frontend-1/lib/auth.js"],"names":["Router","axios","authInitialProps","isProtectedRoute","req","res","auth","getSessionFromServer","isAnonymous","currentPath","redirectUser","user","get","path","redirect","finished","replace"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,gBAAD,IAAsB,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAD,KAAkB;AACtE,QAAMC,IAAI,GAAGC,oBAAoB,EAAjC;;AAEA,MAAIJ,gBAAgB,IAAIK,WAApB,IAAmCC,WAAW,KAAK,SAAvD,EAAkE;AAChE,WAAOC,YAAY,CAACL,GAAD,EAAM,SAAN,CAAnB;AACD;;AACD,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD,CAPM;AASP,OAAO,MAAMC,oBAAoB,GAAG,YAAY;AAC9C,QAAM;AAAEI,IAAAA;AAAF,MAAW,MAAMV,KAAK,CAACW,GAAN,CAAU,mBAAV,CAAvB;AACA,SAAO;AAAED,IAAAA;AAAF,GAAP;AACD,CAHM;;AAKP,MAAMD,YAAY,GAAG,CAACL,GAAD,EAAMQ,IAAN,KAAe;AAClC,MAAIR,GAAJ,EAAS;AACPA,IAAAA,GAAG,CAACS,QAAJ,CAAa,GAAb,EAAkBD,IAAlB;AACAR,IAAAA,GAAG,CAACU,QAAJ,GAAe,IAAf;AACA,WAAO,EAAP;AACD;;AACDf,EAAAA,MAAM,CAACgB,OAAP,CAAeH,IAAf;AACA,SAAO,EAAP;AACD,CARD","sourcesContent":["import Router from \"next/router\";\nimport axios from \"axios\";\n\nexport const authInitialProps = (isProtectedRoute) => ({ req, res }) => {\n  const auth = getSessionFromServer();\n  \n  if (isProtectedRoute && isAnonymous && currentPath !== \"/signin\") {\n    return redirectUser(res, \"/signin\");\n  }\n  return { auth };\n};\n\nexport const getSessionFromServer = async () => {\n  const { user } = await axios.get(\"users/currentuser\");\n  return { user };\n};\n\nconst redirectUser = (res, path) => {\n  if (res) {\n    res.redirect(302, path);\n    res.finished = true;\n    return {};\n  }\n  Router.replace(path);\n  return {};\n};\n"]},"metadata":{},"sourceType":"module"}