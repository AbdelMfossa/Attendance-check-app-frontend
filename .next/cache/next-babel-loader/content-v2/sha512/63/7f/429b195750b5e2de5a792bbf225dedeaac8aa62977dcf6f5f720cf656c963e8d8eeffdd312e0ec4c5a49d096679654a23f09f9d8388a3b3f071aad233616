{"ast":null,"code":"import Router from \"next/router\";\nimport axios from \"axios\";\nexport const authInitialProps = isProtectedRoute => ({\n  req,\n  res\n}) => {\n  const auth = getSessionFromServer();\n  const currentPath = req ? req.url : window.location.pathname;\n  const user = auth.data; //   const userId = user.id;\n\n  const isAnonymous = !user;\n\n  if (isProtectedRoute && isAnonymous && currentPath !== \"/signin\") {\n    return redirectUser(res, \"/auth/signin\");\n  }\n\n  return {\n    auth\n  };\n};\nexport const getSessionFromServer = async () => {\n  const {\n    user\n  } = await axios.get(\"users/currentuser\");\n  return {\n    user\n  };\n};\n\nconst redirectUser = (res, path) => {\n  Router.replace(path);\n  return {};\n};","map":{"version":3,"sources":["/home/roosvelt/Livrable front-end/Attendance-check-app-frontend-1/lib/auth.js"],"names":["Router","axios","authInitialProps","isProtectedRoute","req","res","auth","getSessionFromServer","currentPath","url","window","location","pathname","user","data","isAnonymous","redirectUser","get","path","replace"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,gBAAD,IAAsB,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAD,KAAkB;AACtE,QAAMC,IAAI,GAAGC,oBAAoB,EAAjC;AACA,QAAMC,WAAW,GAAGJ,GAAG,GAAGA,GAAG,CAACK,GAAP,GAAaC,MAAM,CAACC,QAAP,CAAgBC,QAApD;AACA,QAAMC,IAAI,GAAGP,IAAI,CAACQ,IAAlB,CAHsE,CAItE;;AACA,QAAMC,WAAW,GAAG,CAACF,IAArB;;AACA,MAAIV,gBAAgB,IAAIY,WAApB,IAAmCP,WAAW,KAAK,SAAvD,EAAkE;AAChE,WAAOQ,YAAY,CAACX,GAAD,EAAM,cAAN,CAAnB;AACD;;AACD,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD,CAVM;AAYP,OAAO,MAAMC,oBAAoB,GAAG,YAAY;AAC9C,QAAM;AAAEM,IAAAA;AAAF,MAAW,MAAMZ,KAAK,CAACgB,GAAN,CAAU,mBAAV,CAAvB;AACA,SAAO;AAAEJ,IAAAA;AAAF,GAAP;AACD,CAHM;;AAKP,MAAMG,YAAY,GAAG,CAACX,GAAD,EAAMa,IAAN,KAAe;AAClClB,EAAAA,MAAM,CAACmB,OAAP,CAAeD,IAAf;AACA,SAAO,EAAP;AACD,CAHD","sourcesContent":["import Router from \"next/router\";\nimport axios from \"axios\";\n\nexport const authInitialProps = (isProtectedRoute) => ({ req, res }) => {\n  const auth = getSessionFromServer();\n  const currentPath = req ? req.url : window.location.pathname;\n  const user = auth.data;\n  //   const userId = user.id;\n  const isAnonymous = !user;\n  if (isProtectedRoute && isAnonymous && currentPath !== \"/signin\") {\n    return redirectUser(res, \"/auth/signin\");\n  }\n  return { auth };\n};\n\nexport const getSessionFromServer = async () => {\n  const { user } = await axios.get(\"users/currentuser\");\n  return { user };\n};\n\nconst redirectUser = (res, path) => {\n  Router.replace(path);\n  return {};\n};\n"]},"metadata":{},"sourceType":"module"}